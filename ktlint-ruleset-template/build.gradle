plugins {
  id 'org.jetbrains.kotlin.jvm'
  id 'java-library'
  id 'maven'
}

group = 'com.github.username'

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

configurations {
  ktlint
}

dependencies {
  api project(':ktlint-core')
  api deps.kotlin.stdlib
  api deps.kotlin.compiler

  testImplementation project(':ktlint-test')
  testImplementation deps.assertj
  testImplementation('org.jetbrains.spek:spek-junit-platform-engine:1.1.5') {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
  }
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'

  ktlint project(':ktlint')
}

test {
  useJUnitPlatform()
}

task ktlint(type: JavaExec, dependsOn: classes) {
  main = 'com.pinterest.ktlint.Main'
  // adding compiled classes to the classpath so that ktlint would validate project's sources
  // using its own ruleset (in other words to dogfood)
  classpath = configurations.ktlint + sourceSets.main.output
  args '--debug', 'src/**/*.kt'
}

check.dependsOn ktlint

install {
  repositories.mavenInstaller {
    pom.project {
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }
}
