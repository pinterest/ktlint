plugins {
  id 'org.jetbrains.kotlin.jvm' apply false
  alias(libs.plugins.githubRelease)
  alias(libs.plugins.shadow) apply false
  alias(libs.plugins.checksum) apply false
}

repositories {
  mavenCentral()
}

if (project.hasProperty('isKotlinDev')) {
  allprojects { p ->
    String definedVersion = p.ext."VERSION_NAME".minus("-SNAPSHOT")
    p.ext."VERSION_NAME" = "$definedVersion-kotlin-dev-SNAPSHOT".toString()
  }
}

configurations {
  ktlint
}

dependencies {
  ktlint project(':ktlint')
}

task ktlint(type: JavaExec, group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = 'com.pinterest.ktlint.Main'
  args '**/src/**/*.kt', '!**/resources/cli/**', '--baseline=ktlint-baseline.xml', '--verbose'
}

// Deployment tasks
String getGithubToken() {
  if (project.hasProperty("servers.github.privKey")) {
    return project.'servers.github.privKey'
  } else {
    logger.warn("No github token specified")
    return ""
  }
}

// Explicitly adding dependency on "shadowJarExecutable" as Gradle does not it set via "releaseAssets" property
tasks.named("githubRelease") {
  dependsOn { project(":ktlint").tasks.named("shadowJarExecutable") }
}

githubRelease {
  token getGithubToken()
  owner "pinterest"
  repo "ktlint"
  tagName project.properties['VERSION_NAME']
  releaseName project.properties['VERSION_NAME']
  releaseAssets project.files({
    // "shadowJarExecutableChecksum" task does not declare checksum files
    // as output, only the whole output directory. As it uses the same directory
    // as "shadowJarExecutable" - just pass all the files from that directory
    project(":ktlint").tasks.named("shadowJarExecutable").get()
      .outputs
      .files
      .getFiles()
      .first()
      .parentFile
      .listFiles()
  })
  overwrite true
  dryRun false
  body {
    String changelog = project.file("CHANGELOG.md").text
    changelog = changelog.substring(changelog.indexOf("## "))
    // 1 in indexOf here to skip first "## [" occurence
    changelog.substring(0, changelog.indexOf("## [", 1))
  }
}

// Put "servers.github.privKey" in "$HOME/.gradle/gradle.properties".
def announceTask = tasks.register("announceRelease", Exec.class) { announceTask ->
  group = "Help"
  description = "Runs .announce script"
  subprojects
    .findAll { !it.name.contains("ktlint-ruleset-template") }
    .each { subproject ->
      announceTask.dependsOn subproject.tasks.named("publishMavenPublicationToMavenCentralRepository")
    }

  commandLine './.announce', '-y'
  environment VERSION: "${project.'VERSION_NAME'}"
  environment GITHUB_TOKEN: "${getGithubToken()}"
}

def homebrewTask = tasks.register("homebrewBumpFormula", Exec.class) { homebrewTask ->
  group "Help"
  description "Runs brew bump-forumula-pr"
  commandLine './.homebrew'
  environment VERSION: "${project.'VERSION_NAME'}"
  dependsOn(tasks.named("githubRelease"))
}

tasks.register("publishNewRelease", DefaultTask.class) {
  group = "Help"
  description = "Triggers uploading new archives and publish announcements"
  dependsOn(announceTask, homebrewTask, tasks.named("githubRelease"))
}

tasks.withType(Wrapper).configureEach {
  gradleVersion = libs.versions.gradle
  distributionSha256Sum = libs.versions.gradleSha256
  distributionType = Wrapper.DistributionType.BIN
}
