import org.gradle.crypto.checksum.Checksum

plugins {
  id 'ktlint-publication'
  id 'ktlint-kotlin-common'
  id 'com.github.johnrengelman.shadow'
  id 'org.gradle.crypto.checksum'
  id 'signing'
}

jar {
  manifest {
    attributes 'Main-Class': 'com.pinterest.ktlint.Main'
    attributes 'Implementation-Version': project.property('VERSION_NAME')
  }
}

shadowJar {
  mergeServiceFiles()
}

dependencies {
  implementation project(':ktlint-core')
  implementation project(':ktlint-reporter-baseline')
  implementation project(':ktlint-reporter-checkstyle')
  implementation project(':ktlint-reporter-json')
  implementation project(':ktlint-reporter-html')
  implementation project(':ktlint-reporter-plain')
  implementation project(':ktlint-reporter-sarif')
  implementation project(':ktlint-ruleset-experimental')
  implementation project(':ktlint-ruleset-standard')
  implementation project(':ktlint-ruleset-test')
  implementation deps.kotlin.compiler
  implementation deps.klob
  implementation deps.picocli

  testImplementation deps.junit
  testImplementation deps.junit5Api
  testImplementation deps.assertj
  testImplementation deps.jimfs

  testRuntimeOnly deps.junit5Jupiter
  testRuntimeOnly deps.junit5Vintage
}

// Implements https://github.com/brianm/really-executable-jars-maven-plugin maven plugin behaviour.
// To check details how it works, see https://skife.org/java/unix/2011/06/20/really_executable_jars.html.
def shadowJarExecutableTask = tasks.register("shadowJarExecutable", DefaultTask.class) {
  description = "Creates self-executable file, that runs generated shadow jar"
  group = "Distribution"

  inputs.files tasks.named("shadowJar")
  outputs.files("$buildDir/run/ktlint")
  if (!version.toString().endsWith("SNAPSHOT")) {
    outputs.files("$buildDir/run/ktlint.asc")
  }

  doLast {
    File execFile = outputs.files.getFiles().first()
    execFile.withOutputStream {
      // From this SO answer: https://stackoverflow.com/a/56243046
      // First we get the major Java version as an integer, e.g. 8, 11, 16. It has special handling for the leading 1
      // of older java versions, e.g. 1.8 = Java 8
      // JV = $(java -version 2>&1 | head -1 | cut -d'"' -f2 | sed '/^1\./s///' | cut -d'.' -f1)
      // Then if that java version is >= 16, we add the --add-opens command
      // X = X=$( [ "$JV" -ge "16" ] && echo "--add-opens java.base/java.lang=ALL-UNNAMED" || echo "")
      // exec java $X -Xmx512m -jar "$0" "$@"
      it.write "#!/bin/sh\n\nJV=\$(java -version 2>&1 | head -1 | cut -d'\"' -f2 | sed '/^1\\./s///' | cut -d'.' -f1)\n\nX=\$( [ \"\$JV\" -ge \"16\" ] && echo \"--add-opens java.base/java.lang=ALL-UNNAMED\" || echo \"\")\n\nexec java \$X -Xmx512m -jar \"\$0\" \"\$@\"\n\n".bytes
      it.write inputs.files.singleFile.bytes
    }
    execFile.setExecutable(true, false)
    if (!version.toString().endsWith("SNAPSHOT")) {
      signing.sign(execFile)
    }
  }
  finalizedBy tasks.named("shadowJarExecutableChecksum")
}

tasks.register("shadowJarExecutableChecksum", Checksum.class) {
  description = "Generates MD5 checksum for ktlint executable"
  group = "Distribution"

  files = shadowJarExecutableTask.get().outputs.files
  // put the checksums in the same folder with the executable itself
  outputDir = shadowJarExecutableTask.get().outputs.files.getFiles().first().parentFile

  algorithm = Checksum.Algorithm.MD5
}

tasks.withType(Test).configureEach {
  it.dependsOn(shadowJarExecutableTask)
  it.useJUnitPlatform()

  doFirst {
    it.systemProperty(
      "ktlint-cli",
      shadowJarExecutableTask.get().outputs.files.find { it.name == "ktlint" }.absolutePath
    )
    it.systemProperty(
      "ktlint-version",
      version
    )
  }
}
